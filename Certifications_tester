import os
import json
from openai import OpenAI

# put your real key here
os.environ["OPENAI_API_KEY"] = "lbkFJgRIxSc-mfCDgs2u-lIcAQuqluFcVrR5HRrjhSBX5GwakU0TPl0IEWFmEhq59z9KgZX2kycESAA"
client = OpenAI()

def collect_certification_entries():
    """
    Collects certifications/licenses interactively with their acquisition dates.
    Returns a list of certification dictionaries.
    """

    cert_question = """
    Please describe any certifications or licenses you have. Include:
    - certification or license name
    - when you obtained it (year/month)
    If you have none, type 'none'.
    """

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners.

The user has provided the following certification information so far:
"{combined_answer}"

Your task:
1. Check if it includes:
   - the name of the certification or license
   - the year and month obtained
2. Confirm if this is a legitimate, recognized certification suitable for a Japanese rirekisho.
   Valid examples: JLPT, TOEIC, Driver's License, CPA, nursing license
   Invalid examples: SAT scores, GPA, personal club awards
3. If anything is missing (especially year/month of acquisition), politely ask ONLY about the missing element, in simple English.
4. If the certification looks invalid for a rirekisho, politely say so and ask for another.
5. If everything is correct and appropriate, translate or transliterate the certification name to Japanese on your own.
6. Finally, output JSON in this exact format:
{{
  "certification_name": "Japanese name",
  "year": 2023,
  "month": 6
}}
7. Never output JSON if year/month is missing — ask for it instead.
8. Do not ask the user to provide Japanese text. Generate it yourself.
9. Reply with ONLY JSON if complete, no other text, no markdown code block.
"""

    entries = []

    print(cert_question)
    user_input = input("> ")
    combined_answer = user_input.strip() + " "

    if user_input.lower() in ["none", "なし"]:
        print("\n✅ No certifications saved.\n")
        return []

    while True:
        cert_data = None
        retries = 0
        max_retries = 5

        while not cert_data and retries < max_retries:
            prompt = validation_prompt_template.format(combined_answer=combined_answer.strip())

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            gpt_reply = response.choices[0].message.content.strip()

            print("\n=== GPT RAW REPLY ===")
            print(gpt_reply)
            print("=====================\n")

            # clean markdown code block if present
            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                cert_data = json.loads(gpt_reply)
                print("\n✅ Certification entry saved.\n")
            except json.JSONDecodeError:
                print("\n⚠️ GPT did not return valid JSON. Please clarify:")
                next_input = input("> ")
                combined_answer += next_input.strip() + " "
                retries += 1
                continue

        if not cert_data:
            print("\n❌ Could not parse certification after multiple attempts. Skipping.\n")
            break

        entries.append(cert_data)

        followup = input(
            "Is there anything else you would like to add to your certifications section? (yes/no)\n> "
        ).strip().lower()

        if followup in ["no", "n"]:
            print("\n✅ All certifications saved. Moving on!\n")
            break
        else:
            print(cert_question)
            next_cert = input("> ")
            combined_answer = next_cert.strip() + " "  # reset for next block

    return entries


# test harness
if __name__ == "__main__":
    cert_entries = collect_certification_entries()
    print("\n=== FINAL CERTIFICATION DATA ===")
    print(json.dumps(cert_entries, indent=2, ensure_ascii=False))
