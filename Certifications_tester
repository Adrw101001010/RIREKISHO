import os
import json
from openai import OpenAI

# your API key
os.environ["OPENAI_API_KEY"] = "uFcVrR5HRrjhSBX5GwakU0TPl0IEWFmEhq59z9KgZX2kycESAA"
client = OpenAI()

def collect_certification_entries():
    """
    Collects certifications/licenses interactively with their acquisition dates.
    """

    cert_question = """
Please describe any certifications or licenses you have. Include:
- certification or license name
- when you obtained it (year/month)
If you have none, type 'none'.
"""

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners.

The user provided:
"{combined_answer}"

Your task:
1. Check if it includes:
   - the name of the certification or license
   - the year and month obtained
2. Confirm if this is a legitimate, recognized certification suitable for a Japanese rirekisho.
   Valid examples: JLPT, TOEIC, Driver's License, CPA, nursing license
   Invalid examples: SAT scores, GPA, personal club awards
3. If anything is missing (especially year/month of acquisition), politely ask ONLY about the missing element in simple English.
4. If the certification looks invalid for a rirekisho, politely say so and ask for another.
5. If everything is correct and appropriate, translate or transliterate the certification name to Japanese on your own.
6. Finally, output JSON in this exact format:
{{
  "certification_name": "Japanese name",
  "year": 2023,
  "month": 6
}}
7. Never output JSON if year/month is missing — ask for it instead.
8. Do not ask the user to provide Japanese text. Generate it yourself.
9. Reply with ONLY JSON if complete, no other text, no markdown code block.
"""

    entries = []

    print(cert_question)
    combined_answer = []

    first_input = input("> ").strip()
    if first_input.lower() in ["none", "なし"]:
        print("\n✅ No certifications saved.\n")
        return []

    combined_answer.append(first_input + " ,")

    while True:
        cert_data = None

        while not cert_data:
            prompt = validation_prompt_template.format(
                combined_answer=" ".join(combined_answer)
            )

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )
            gpt_reply = response.choices[0].message.content.strip()
            print(gpt_reply)

            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                cert_data = json.loads(gpt_reply)
                print("\n✅ Certification entry saved.\n")
            except json.JSONDecodeError:
                next_input = input("> ").strip()
                combined_answer.append(next_input + " ,")
                continue

        while True:
            print("Would you like to change any of the following?")
            print(f"1: Certification name → {cert_data['certification_name']}")
            print(f"2: Year → {cert_data['year']}")
            print(f"3: Month → {cert_data['month']}")
            print(f"4: Change nothing")

            user_choice = input("Enter a number: ").strip()
            if user_choice.isdigit():
                choice_num = int(user_choice)
                if choice_num == 1:
                    cert_data["certification_name"] = input("New certification name: ").strip()
                elif choice_num == 2:
                    cert_data["year"] = int(input("New year of acquisition: ").strip())
                elif choice_num == 3:
                    cert_data["month"] = int(input("New month of acquisition: ").strip())
                elif choice_num == 4:
                    print("✅ Certification confirmed.")
                    entries.append(cert_data)
                    break
                else:
                    print("Number out of range. Try again.")
            else:
                print("Input must be a number. Try again.")

        followup = input(
            "Is there anything else you would like to add to your certifications section? (yes/no)\n> "
        ).strip().lower()

        if followup in ["no", "n"]:
            print("\n✅ All certifications saved. Moving on!\n")
            break
        else:
            print(cert_question)
            next_cert = input("> ").strip()
            combined_answer = [next_cert + " ,"]

    return entries

# test
if __name__ == "__main__":
    cert_entries = collect_certification_entries()
    print("\n=== FINAL CERTIFICATION DATA ===")
    print(json.dumps(cert_entries, indent=2, ensure_ascii=False))
