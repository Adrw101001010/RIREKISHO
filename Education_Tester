from openai import OpenAI
import os
import json

# your API key
os.environ["OPENAI_API_KEY"] = "FcVrR5HRrjhSBX5GwakU0TPl0IEWFmEhq59z9KgZX2kycESAA"
client = OpenAI()

def collect_education_entries():
    """
    Collects education entries, allowing user clarifying questions,
    and resetting the question-check on every turn.
    """

    education_question = """
Please describe your education history. Include:
- school name
- degree or major
- when you started (year/month)
- when you graduated (year/month, or say still attending)
"""

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners fill out a rirekisho.

The user provided:
"{combined_answer}"

Please:
1. Check if it includes:
   - school name
   - major
   - year and month of entry
   - year and month of graduation (or say still attending)
2. If anything is missing, politely ask in English ONLY about the missing fields.
3. If and ONLY IF school name, major, year and month of enrollment, and year and month of graduation (or say still attending) are ALL INCLUDED, translate or transliterate to Japanese and output JSON in this exact formatting:
{{
  "school_name": "学校名",
  "major": "専攻名",
  "start_year": 2023,
  "start_month": 4,
  "end_year": 2027,
  "end_month": 3
}}
4. Never ask the user for Japanese, do it yourself.
5. Reply ONLY with JSON, no markdown or other text.
"""

    entries = []
    combined_answer = []

    print(education_question)

    while True:
        education_data = None

        while not education_data:
            user_input = input("> ").strip()

            # check if user input is a question
            question_check_prompt = f"""
Is this user input a question? Answer only 'yes' or 'no':
"{user_input}"
"""
            check_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": question_check_prompt}
                ]
            )
            is_question = check_response.choices[0].message.content.strip().lower()

            if is_question.startswith("yes"):
                clarify_prompt = f"""
You are a Japanese resume assistant. The user asked:
"{user_input}"

Please answer politely in simple English.
"""
                clarify_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                        {"role": "user", "content": clarify_prompt}
                    ]
                )
                print("\nGPT:", clarify_response.choices[0].message.content.strip())
            else:
                combined_answer.append(user_input + "  ,")
                print(combined_answer)

            # validate with GPT
            prompt = validation_prompt_template.format(
                combined_answer=" ".join(combined_answer)
            )

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            gpt_reply = response.choices[0].message.content.strip()
            print(gpt_reply)

            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                education_data = json.loads(gpt_reply)

                majorCheck = education_data["major"]
                if not (majorCheck.endswith("学部") or majorCheck.endswith("専攻")):
                    education_data["major"] = ""

                print("\n✅ Education entry saved.\n")

            except json.JSONDecodeError:
                continue

        while True:
            print("Would you like to change any of the following?")
            print(f"1: School name → {education_data['school_name']}")
            print(f"2: Major → {education_data['major']}")
            print(f"3: Start year → {education_data['start_year']}")
            print(f"4: Start month → {education_data['start_month']}")
            print(f"5: End year → {education_data['end_year']}")
            print(f"6: End month → {education_data['end_month']}")
            print(f"7: Change nothing")

            user_choice = input("Enter a number: ").strip()

            if user_choice.isdigit():
                choice_num = int(user_choice)

                if choice_num == 1:
                    education_data["school_name"] = input("New school name: ").strip()
                elif choice_num == 2:
                    education_data["major"] = input("New major: ").strip()
                elif choice_num == 3:
                    education_data["start_year"] = int(input("New start year: ").strip())
                elif choice_num == 4:
                    education_data["start_month"] = int(input("New start month: ").strip())
                elif choice_num == 5:
                    education_data["end_year"] = int(input("New end year: ").strip())
                elif choice_num == 6:
                    education_data["end_month"] = int(input("New end month: ").strip())
                elif choice_num == 7:
                    print("✅ Education entry confirmed.")
                    entries.append(education_data)
                    break
                else:
                    print("Number out of range. Try again.")
            else:
                print("Input must be a number. Try again.")

        followup = input(
            "Is there anything else you would like to add to your education section? (yes/no)\n> "
        ).strip().lower()
        if followup in ["no", "n"]:
            print("\n✅ All education entries saved. Moving on!\n")
            break
        else:
            print(education_question)
            combined_answer = []  # reset for next block

    return entries


# test-runner
if __name__ == "__main__":
    results = collect_education_entries()
    print("\n=== FINAL EDUCATION DATA ===")
    print(json.dumps(results, indent=2, ensure_ascii=False))
