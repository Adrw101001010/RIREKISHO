from openai import OpenAI
import os
import json

# your API key
os.environ["OPENAI_API_KEY"] = "-bj0iu3uJLiqAFIlACkLJdPt07Z6IVMdOrcYvZV_jq376ti9gYeT4MOVi6jStANrf0M8TOR5XTeT3BlbkFJgRIxSc-mfCDgs2u-lIcAQuqluFcVrR5HRrjhSBX5GwakU0TPl0IEWFmEhq59z9KgZX2kycESAA"
client = OpenAI()

def collect_education_entries():
    """
    Collects education entries, allowing user clarifying questions,
    and resetting the question-check on every turn.
    """

    education_question = """
Please describe your education history. Include:
- school name
- degree or major
- when you started (year/month)
- when you graduated (year/month, or say still attending)
"""

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners fill out a rirekisho.

The user provided:
"{combined_answer}"

Please:
1. Check if it includes:
   - school name
   - major
   - year and month of entry
   - year and month of graduation (or say still attending)
2. If anything is missing, politely ask ONLY about the missing fields.
3. If and ONLY IF school name, major, year and month of entry, and year and month of graduation (or say still attending) are ALL INCLUDED, translate or transliterate to Japanese and output JSON in this exact formatting:
{{
  "school_name": "Japanese name",
  "major": "Japanese name",
  "start_year": 2023,
  "start_month": 4,
  "end_year": 2027,
  "end_month": 3
}}
4. Never ask the user for Japanese, do it yourself.
5. Reply ONLY with JSON, no markdown or other text.
"""

    entries = []
    combined_answer = ""

    print(education_question)

    while True:
        education_data = None

        while not education_data:
            # reset question flag each time
            user_input_is_question = False

            user_input = input("> ").strip()

            # check if user input is a question
            question_check_prompt = f"""
Is this user input a question? Answer only 'yes' or 'no':
"{user_input}"
"""
            check_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": question_check_prompt}
                ]
            )
            is_question = check_response.choices[0].message.content.strip().lower()

            if is_question.startswith("yes"):
                user_input_is_question = True
                # ANSWER THE QUESTION AS A RIREKISHO HELPER
                clarify_prompt = f"""
You are a Japanese resume assistant. The user asked:
"{user_input}"

Please answer politely in simple English.
"""
                clarify_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                        {"role": "user", "content": clarify_prompt}
                    ]
                )
                print("\nGPT:", clarify_response.choices[0].message.content.strip())

                # do not change combined_answer
            else:
                user_input_is_question = False
                combined_answer += user_input + " "

            # run validation on current combined_answer
            prompt = validation_prompt_template.format(
                combined_answer=combined_answer.strip()
            )

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            gpt_reply = response.choices[0].message.content.strip()
            print("\n=== GPT RAW REPLY ===")
            print(gpt_reply)
            print("=====================\n")

            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                education_data = json.loads(gpt_reply)
                print("\n✅ Education entry saved.\n")
            except json.JSONDecodeError:
                print("\n⚠️ GPT could not parse your information. Please clarify:")
                continue

        entries.append(education_data)

        followup = input(
            "Is there anything else you would like to add to your education section? (yes/no)\n> "
        ).strip().lower()
        if followup in ["no", "n"]:
            print("\n✅ All education entries saved. Moving on!\n")
            break
        else:
            print(education_question)
            combined_answer = ""  # reset for next block

    return entries

# test-runner
if __name__ == "__main__":
    results = collect_education_entries()
    print("\n=== FINAL EDUCATION DATA ===")
    print(json.dumps(results, indent=2, ensure_ascii=False))
