from openai import OpenAI
import os
import json

# replace with your actual key later
os.environ["OPENAI_API_KEY"] = "ti9gYeT4MOVi6jStANrf0M8TOR5XTeT3BlbkFJgRIxSc-mfCDgs2u-lIcAQuqluFcVrR5HRrjhSBX5GwakU0TPl0IEWFmEhq59z9KgZX2kycESAA"
client = OpenAI()

def collect_education_entries():
    """
    Collects education entries, allowing user clarifying questions,
    and resetting the question-check on every turn.
    """

    education_question = """
Please describe your education history. Include:
- school name
- degree or major
- when you started (year/month)
- when you graduated (year/month, or say still attending)
"""

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners fill out a rirekisho.

The user provided:
"{combined_answer}"

Please:
1. Check if it includes:
   - school name
   - major
   - year and month of entry
   - year and month of graduation (or say still attending)
2. If anything is missing, politely ask in English ONLY about the missing fields.
3. If and ONLY IF school name, major, year and month of enrollment, and year and month of graduation (or say still attending) are ALL INCLUDED, translate or transliterate to Japanese and output JSON in this exact formatting:
{{
  "school_name": "学校名",
  "major": "専攻名",
  "start_year": 2023,
  "start_month": 4,
  "end_year": 2027,
  "end_month": 3
}}
4. Never ask the user for Japanese, do it yourself.
5. Reply ONLY with JSON, no markdown or other text.
"""

    entries = []
    combined_answer = ""

    print(education_question)

    while True:
        education_data = None

        while not education_data:
            # reset question flag each time
            user_input_is_question = False

            user_input = input("> ").strip()

            # check if user input is a question
            question_check_prompt = f"""
Is this user input a question? Answer only 'yes' or 'no':
"{user_input}"
"""
            check_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": question_check_prompt}
                ]
            )
            is_question = check_response.choices[0].message.content.strip().lower()

            if is_question.startswith("yes"):
                user_input_is_question = True
                # ANSWER THE QUESTION AS A RIREKISHO HELPER
                clarify_prompt = f"""
You are a Japanese resume assistant. The user asked:
"{user_input}"

Please answer politely in simple English.
"""
                clarify_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                        {"role": "user", "content": clarify_prompt}
                    ]
                )
                print("\nGPT:", clarify_response.choices[0].message.content.strip())

                # do not change combined_answer
            else:
                user_input_is_question = False
                combined_answer += user_input + "  ,"

            # run validation on current combined_answer
            prompt = validation_prompt_template.format(
                combined_answer=combined_answer.strip()
            )

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            gpt_reply = response.choices[0].message.content.strip()
            
            print(gpt_reply)
            

            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                education_data = json.loads(gpt_reply)

                majorCheck = education_data["major"]

                if not (majorCheck.endswith("学部") or majorCheck.endswith("専攻")): # Removing major if high school is entered
                    education_data["major"] = ""

                print("\n✅ Education entry saved.\n")

            except json.JSONDecodeError:
                
                continue
                   
        entries.append(education_data)

        followup = input(
            "Is there anything else you would like to add to your education section? (yes/no)\n> "
        ).strip().lower()
        if followup in ["no", "n"]:
            print("\n✅ All education entries saved. Moving on!\n")
            break
        else:
            print(education_question)
            combined_answer = ""  # reset for next block

    return entries

def collect_name_entry():
    """
    Collects and confirms a user's name for a Japanese resume.
    Returns a dictionary:
    {
        "english_name": ...,
        "japanese_kanji": ...,
        "katakana": ...
    }
    """

    print("""
    Please type your full name in English order (First Last).
    The system will convert it to Japanese style automatically.
    """)

    english_name = input("> ").strip()

    prompt = f"""
You are a Japanese resume assistant.
The user entered their name in English order:
"{english_name}"

Your task:
1. Convert to family-name-first order for a Japanese resume.
2. Generate a katakana reading for the name.
3. If the name is a typical Japanese name, provide a reasonable kanji.
   If the name is foreign, set the "japanese_kanji" field to null.
4. Respond strictly in JSON only, no polite commentary, no markdown, no explanation. 
Use this exact structure:
{{
  "english_name": "John Smith",
  "japanese_kanji": "山田太郎",
  "katakana": "スミス ジョン"
}}
If there is no kanji, then japanese_kanji is just katakana:
{{
  "english_name": "John Smith",
  "japanese_kanji": スミス ジョン,
  "katakana": "スミス ジョン"
}}
Respond with JSON only. Nothing else.
"""

    retries = 0
    max_retries = 5

    while retries < max_retries:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful Japanese resume assistant."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )

        gpt_reply = response.choices[0].message.content.strip()

        print("\n=== GPT RAW REPLY ===")
        print(gpt_reply)
        print("=====================\n")

        # clean markdown code block if present
        if gpt_reply.startswith("```"):
            gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

        try:
            name_data = json.loads(gpt_reply)
            print(f"\nThe katakana for your name is suggested as: {name_data['katakana']}")
            confirm = input("Is this katakana correct? (yes/no)\n> ").strip().lower()

            if confirm in ["yes", "y"]:
                print("\n✅ Name entry saved.\n")
                return name_data
            else:
                manual_katakana = input("OK, please type the correct katakana spelling:\n> ").strip()
                name_data["katakana"] = manual_katakana
                print("\n✅ Name entry saved with your correction.\n")
                return name_data

        except json.JSONDecodeError:
            print("\n⚠️ GPT did not return valid JSON. Retrying...")
            retries += 1

    # after too many retries
    print("\n❌ Could not reliably get a name conversion after multiple attempts. Please try again later.\n")
    return {
        "english_name": english_name,
        "japanese_kanji": None,
        "katakana": ""
    }

def collect_work_entries():
    """
    Collects work history entries, allowing clarifying questions,
    and resetting the question-check on every turn.
    """

    work_question = """
Please describe your work history. Include:
- company name
- position or role
- when you started (year/month)
- when you ended (year/month, or say still working)
"""

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners fill out a rirekisho.

The user provided:
"{combined_answer}"

Please:
1. Check if it includes:
   - company name
   - position or role
   - year and month of entry
   - year and month of exit (or say still working)
2. If anything is missing, politely ask ONLY about the missing fields.
3. If and ONLY IF company name, role, year and month of entry, and year and month of exit (or still working) are ALL INCLUDED, translate or transliterate to Japanese and output JSON in this exact formatting:
{{
  "company_name": "Japanese company name",
  "position": "Japanese job title",
  "start_year": 2021,
  "start_month": 4,
  "end_year": 2024,
  "end_month": 3
}}
4. Never ask the user for Japanese, do it yourself.
5. Reply ONLY with JSON, no markdown or other text.
"""

    entries = []
    combined_answer = ""

    print(work_question)

    while True:
        work_data = None

        while not work_data:
            user_input_is_question = False  # reset each turn
            user_input = input("> ").strip()

            # question check
            question_check_prompt = f"""
Is this user input a question? Answer only 'yes' or 'no':
"{user_input}"
"""
            check_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": question_check_prompt}
                ]
            )
            is_question = check_response.choices[0].message.content.strip().lower()

            if is_question.startswith("yes"):
                user_input_is_question = True
                # answer the question
                clarify_prompt = f"""
You are a Japanese resume assistant. The user asked:
"{user_input}"

Please answer politely in simple English.
"""
                clarify_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                        {"role": "user", "content": clarify_prompt}
                    ]
                )
                print("\nGPT:", clarify_response.choices[0].message.content.strip())

                # do not add question to combined
            else:
                combined_answer += user_input + " "

            # validate current combined
            prompt = validation_prompt_template.format(
                combined_answer=combined_answer.strip()
            )

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )
            gpt_reply = response.choices[0].message.content.strip()

            print("\n=== GPT RAW REPLY ===")
            print(gpt_reply)
            print("=====================\n")

            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                work_data = json.loads(gpt_reply)
                print("\n✅ Work history entry saved.\n")
            except json.JSONDecodeError:
                print("\n⚠️ GPT could not parse your information. Please clarify:")
                continue

        entries.append(work_data)

        followup = input(
            "Is there anything else you would like to add to your work history section? (yes/no)\n> "
        ).strip().lower()
        if followup in ["no", "n"]:
            print("\n✅ All work history entries saved. Moving on!\n")
            break
        else:
            print(work_question)
            combined_answer = ""  # reset for next block

    return entries

def collect_gender():
    """
    Collects and confirms the user's gender.
    Returns '男性' or '女性'.
    """

    print("""
    Please enter your gender. Type 'male' or 'female'.
    """)
    
    while True:
        gender_input = input("> ").strip().lower()
        
        if gender_input in ["male", "m"]:
            japanese_gender = "男性"
        elif gender_input in ["female", "f"]:
            japanese_gender = "女性"
        else:
            print("Sorry, please type 'male' or 'female' only.")
            continue
        
        print(f"\nYou entered: {japanese_gender}")
        confirm = input("Is this correct? (yes/no)\n> ").strip().lower()
        
        if confirm in ["yes", "y"]:
            print("\n✅ Gender saved.\n")
            return japanese_gender
        else:
            print("OK, please re-enter your gender:")
def collect_address_entry():
    """
    Collects the user's address for a Japanese resume:
    - address (full, in Japanese style)
    - postal code (separate)
    Returns:
    {
      "address": "東京都世田谷区太子堂2-14-6",
      "postal_code": "154-0004"
    }
    """

    address_question = """
    Please enter your current address in Japan. Include:
    - prefecture
    - city/ward
    - street and block (example: 2-14-6)
    - postal code
    Example: "Tokyo Setagaya Taishido 2-14-6 154-0004"
    """

    validation_prompt_template = """
    You are a Japanese resume assistant helping foreigners. 
    The user gave this address information:
    "{combined_answer}"

    Your task:
    1. Check if it includes:
       - a full Japanese-style address
       - a postal code
    2. If anything is missing, politely ask ONLY about the missing part in simple English.
    3. If everything is present, transform the address to proper Japanese format 
       (prefecture first, ward/city, then block/street).
    4. Output JSON in this exact format:
    {{
      "address": "東京都世田谷区太子堂2-14-6",
      "postal_code": "154-0004"
    }}
    5. Example: if the user types "Tokyo Setagaya Taishido 2-14-6 154-0004", 
    you must transform it to:
      address: 東京都世田谷区太子堂2-14-6
      postal_code: 154-0004
    6. Reply ONLY with JSON if complete, no other text, no markdown code block.
    """

    print(address_question)
    user_input = input("> ")
    combined_answer = user_input.strip() + " "

    address_data = None

    while not address_data:
        prompt = validation_prompt_template.format(combined_answer=combined_answer.strip())

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful Japanese resume assistant."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )

        gpt_reply = response.choices[0].message.content.strip()

        print("\n=== GPT RAW REPLY ===")
        print(gpt_reply)
        print("=====================\n")

        try:
            # remove markdown if GPT uses ```
            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()
            
            address_data = json.loads(gpt_reply)
            print("\n✅ Address saved.\n")
        except json.JSONDecodeError:
            print(f"\nGPT: {gpt_reply}")
            next_input = input("> ")
            combined_answer += next_input.strip() + " "
            continue

    return address_data


def collect_phone_number():
    """
    Collects and confirms the user's Japanese phone number.
    Returns a string with the phone number.
    """

    print("""
    Please enter your phone number in Japan, including the area code.
    Example: 090-1234-5678
    """)

    while True:
        phone_input = input("> ").strip()
        
        print(f"\nYou entered: {phone_input}")
        confirm = input("Is this correct? (yes/no)\n> ").strip().lower()
        
        if confirm in ["yes", "y"]:
            print("\n✅ Phone number saved.\n")
            return phone_input
        else:
            print("OK, please re-enter your phone number:")
            
def collect_birthdate():
    """
    Collects and confirms the user's birthdate.
    Returns a dictionary:
    {
      "birth_year": 1998,
      "birth_month": 5,
      "birth_day": 14,
      "formatted": "1998年5月14日"
    }
    """
    print("""
    Please enter your date of birth.
    - Year (YYYY)
    - Month (MM)
    - Day (DD)
    """)

    while True:
        try:
            year = int(input("Birth year (e.g. 1998):\n> ").strip())
            month = int(input("Birth month (e.g. 5):\n> ").strip())
            day = int(input("Birth day (e.g. 14):\n> ").strip())
        except ValueError:
            print("Please enter numbers only. Let's try again.\n")
            continue
        
        formatted = f"{year}年{month}月{day}日"
        print(f"\nYou entered: {formatted}")
        confirm = input("Is this correct? (yes/no)\n> ").strip().lower()
        
        if confirm in ["yes", "y"]:
            print("\n✅ Birthdate saved.\n")
            return {
                "birth_year": year,
                "birth_month": month,
                "birth_day": day,
                "formatted": formatted
            }
        else:
            print("OK, let's re-enter your birthdate.\n")
def collect_certification_entries():
    """
    Collects certifications/licenses interactively with their acquisition dates.
    Returns a list of certification dictionaries.
    [
      {
        "certification_name": "普通自動車免許",
        "year": 2023,
        "month": 6
      },
      ...
    ]
    """

    cert_question = """
    Please describe any certifications or licenses you have. Include:
    - certification or license name
    - when you obtained it (year/month)
    If you have none, type 'none'.
    """

    validation_prompt_template = """
You are a Japanese resume assistant helping foreigners.

The user has provided the following certification information so far:
"{combined_answer}"

Your task:
1. Check if it includes:
   - the name of the certification or license
   - the year and month obtained
2. Confirm if this is a legitimate, recognized certification suitable for a Japanese rirekisho.
   Valid examples: JLPT, TOEIC, Driver's License, CPA, nursing license
   Invalid examples: SAT scores, GPA, personal club awards
3. If anything is missing (especially year/month of acquisition), politely ask ONLY about the missing element, in simple English.
4. If the certification looks invalid for a rirekisho, politely say so and ask for another.
5. If everything is correct and appropriate, translate or transliterate the certification name to Japanese on your own.
6. Finally, output JSON in this exact format:
{{
  "certification_name": "Japanese name",
  "year": 2023,
  "month": 6
}}
7. Never output JSON if year/month is missing — ask for it instead.
8. Do not ask the user to provide Japanese text. Generate it yourself.
9. Reply with ONLY JSON if complete, no other text, no markdown code block.
"""

    entries = []

    print(cert_question)
    user_input = input("> ")
    combined_answer = user_input.strip() + " "

    if user_input.lower() in ["none", "なし"]:
        print("\n✅ No certifications saved.\n")
        return []

    while True:
        cert_data = None
        retries = 0
        max_retries = 5

        while not cert_data and retries < max_retries:
            prompt = validation_prompt_template.format(combined_answer=combined_answer.strip())

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            gpt_reply = response.choices[0].message.content.strip()

            print("\n=== GPT RAW REPLY ===")
            print(gpt_reply)
            print("=====================\n")

            # clean markdown code block if present
            if gpt_reply.startswith("```"):
                gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

            try:
                cert_data = json.loads(gpt_reply)
                print("\n✅ Certification entry saved.\n")
            except json.JSONDecodeError:
                print("\n⚠️ GPT did not return valid JSON. Please clarify:")
                next_input = input("> ")
                combined_answer += next_input.strip() + " "
                retries += 1
                continue

        if not cert_data:
            print("\n❌ Could not parse certification after multiple attempts. Skipping.\n")
            break

        entries.append(cert_data)

        followup = input(
            "Is there anything else you would like to add to your certifications section? (yes/no)\n> "
        ).strip().lower()

        if followup in ["no", "n"]:
            print("\n✅ All certifications saved. Moving on!\n")
            break
        else:
            print(cert_question)
            next_cert = input("> ")
            combined_answer = next_cert.strip() + " "  # reset for next block

    return entries

def collect_hobbies():
    """
    Collects hobbies/interests for a Japanese resume,
    validates appropriateness, and translates to Japanese.
    Returns a list of hobby strings in Japanese.
    """

    hobby_question = """
    Please describe your hobbies or personal interests.
    You can list several, separated by commas.
    If you do not wish to include any, type 'none'.
    """

    validation_prompt_template = """
    You are a Japanese resume assistant helping foreigners.
    The user gave this hobby information:
    "{combined_answer}"

    Your task:
    1. Split them into a list if there are multiple hobbies.
    2. Check if each is appropriate for a Japanese rirekisho
       (for example, common and acceptable hobbies: reading, sports, travel, cooking, music).
       Inappropriate examples: sleeping, watching TikTok for 6 hours, doing nothing.
    3. If any seem inappropriate, politely tell the user only those ones are not suitable
       and ask for another.
    4. If everything is correct, translate or phrase them naturally in Japanese,
       using polite Japanese expressions if needed.
    5. Finally, output JSON in this format:
    {{
      "hobbies": ["読書", "旅行", "音楽鑑賞"]
    }}
    6. Reply ONLY with JSON if complete and appropriate, no markdown code block.
    """

    print(hobby_question)
    user_input = input("> ")
    combined_answer = user_input.strip() + " "

    hobbies_data = None
    retries = 0
    max_retries = 5

    if user_input.lower() in ["none", "なし"]:
        print("\n✅ No hobbies saved.\n")
        return []

    while not hobbies_data and retries < max_retries:
        prompt = validation_prompt_template.format(combined_answer=combined_answer.strip())

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a helpful Japanese resume assistant."},
                {"role": "user", "content": prompt}
            ]
        )

        gpt_reply = response.choices[0].message.content.strip()

        print("\n=== GPT RAW REPLY ===")
        print(gpt_reply)
        print("=====================\n")

        # remove markdown fences if present
        if gpt_reply.startswith("```"):
            gpt_reply = gpt_reply.replace("```json", "").replace("```", "").strip()

        try:
            hobbies_data = json.loads(gpt_reply)
            print("\n✅ Hobbies saved.\n")
        except json.JSONDecodeError:
            print("\n⚠️ GPT did not return valid JSON. Please clarify:")
            next_input = input("> ")
            combined_answer += next_input.strip() + " "
            retries += 1
            continue

    if not hobbies_data:
        print("\n❌ Could not parse hobbies after multiple attempts. Skipping.\n")
        return []

    return hobbies_data["hobbies"]

def collect_motivation_interests():
    """
    Collects the user's motivation, hobbies, and appeal points in one block,
    then polishes them repeatedly to match a Japanese rirekisho style.
    """

    motivation_question = """
Please tell me about:
- your motivation for applying
- any personal hobbies or interests
- your strengths or appeal points

Write them in simple English, in one block.
"""

    # polished example for the prompt
    ideal_japanese_example = """
私は、これまでに培った国際ビジネスやITスキルを活かし、御社の成長に貢献したいと考えております。
特に、英語と日本語を活かしたコミュニケーション能力で円滑な業務推進に寄与できると自負しております。
趣味としては読書やスポーツがあり、幅広い知識と体力を活かして新しい課題にも前向きに挑戦できます。
今後も自己研鑽を続け、さらに成長していきたいと考えています。
"""

    polish_prompt_template = """
You are a professional Japanese resume writer specializing in perfecting
the "志望動機・自己PR・趣味特技" section.

This rough draft was given to you:
"{user_text}"

Please transform the rough draft into a highly-polished,
professional Japanese text that matches the following ideal example: "{ideal_example}"



Return only the final polished Japanese text, with no other comments or markdown.
"""

    print(motivation_question)
    user_input = input("> ").strip()

    # Step 1 — do initial polish
    current_text = user_input
    for polish_round in range(3):
        prompt = polish_prompt_template.format(
            user_text=current_text.strip(),
            ideal_example=ideal_japanese_example.strip()
        )
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a professional Japanese resume writer."},
                {"role": "user", "content": prompt}
            ]
        )
        polished = response.choices[0].message.content.strip()
        print(f"\n=== POLISH ROUND {polish_round+1} ===")
        print(polished)
        print("===========================\n")
        current_text = polished

    print("\n✅ Final motivation/appeal block saved.\n")
    return current_text


if __name__ == "__main__":
    print("=== Japanese Resume Builder ===\n")

    # collect data in order
    name_data = collect_name_entry()
    birth_data = collect_birthdate()
    address_data = collect_address_entry()
    gender_data = collect_gender()
    phone_data = collect_phone_number()
    education_data = collect_education_entries()
    work_data = collect_work_entries()
    cert_data = collect_certification_entries()
    hobbies_data = collect_motivation_interests()

    # structure all results
    resume_data = {
        "name": name_data,
        "birthdate": birth_data,
        "address": address_data,
        "gender": gender_data,
        "phone": phone_data,
        "education": education_data,
        "work_history": work_data,
        "certifications": cert_data,
        "hobbies": hobbies_data,
   
    }



    print("\n=== FINAL DATA COLLECTED ===\n")
    import pprint
    pprint.pprint(resume_data, width=120)




















from openpyxl import load_workbook
from datetime import datetime
import os

# build the absolute path to Downloads
template_path = os.path.expanduser("~/Downloads/01_A4_format.xlsx")

# load workbook
try:
    wb = load_workbook(template_path)
    ws = wb.active
except FileNotFoundError:
    print("❌ Template file not found. Please check the path or move the file to the correct location.")
    exit(1)

# your data example
final_data = resume_data

# name
ws["C6"] = final_data["name"]["katakana"]
ws["C9"] = final_data["name"]["katakana"]

# birthdate + gender
ws["B14"] = final_data["birthdate"]["formatted"]
ws["F15"] = gender_data  # placeholder
ws["E3"] = datetime.today().strftime("%Y/%m/%d")

# address
ws["C16"] = final_data["name"]["katakana"]  # this is a placeholder for address furigana
ws["C19"] = final_data["address"]["postal_code"]
ws["C21"] = final_data["address"]["address"]
ws["I16"] = final_data["phone"]

# education + work combined
history_entries = []
for edu in final_data["education"]:
    label = f"{edu['school_name']} / {edu['major']}"
    start = f"{edu['start_year']}年{edu['start_month']}月"
    end = (
        f"{edu['end_year']}年{edu['end_month']}月"
        if edu['end_year']
        else "現在"
    )
    history_entries.append((start, end, label))

for work in final_data["work_history"]:
    label = f"{work['company_name']} / {work['position']}"
    start = f"{work['start_year']}年{work['start_month']}月"
    end = (
        f"{work['end_year']}年{work['end_month']}月"
        if work['end_year']
        else "現在"
    )
    history_entries.append((start, end, label))

row = 38
for entry in history_entries:
    year_str, month_str = entry[0].split("年")
    ws[f"B{row}"] = year_str
    ws[f"C{row}"] = month_str.replace("月", "")
    ws[f"D{row}"] = entry[2]
    row += 3

# certifications
row = 25
for cert in final_data["certifications"]:
    ws[f"N{row}"] = cert["certification_name"]
    ws[f"M{row}"] = cert["month"]
    ws[f"L{row}"] = cert["year"]
    row += 3

# hobbies
ws["L47"] = final_data["hobbies"]



# save
output_path = os.path.expanduser("~/Documents/output_rirekisho.xlsx")
wb.save(output_path)
print(f"✅ Successfully saved to {output_path}")
